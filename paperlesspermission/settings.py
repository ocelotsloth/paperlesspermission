"""
Django settings for paperlesspermission project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/

Copyright 2020 Mark Stenglein, The Paperless Permission Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import os
import ldap
import environ
from django_auth_ldap.config import (LDAPSearch, LDAPSearchUnion,
                                     LDAPGroupQuery, NestedMemberDNGroupType)
import logging.config

env = environ.Env(
    DEBUG=(bool, False),
    DJO_SFTP_HOST=(str, ''),
    DJO_SFTP_USER=(str, ''),
    DJO_SFTP_PASS=(str, ''),
    DJO_SFTP_FINGERPRINT=(str, ''),
    EMAIL_HOST=(str, ''),
    EMAIL_PORT=(str, ''),
    EMAIL_HOST_USER=(str, ''),
    EMAIL_HOST_PASSWORD=(str, ''),
    EMAIL_USE_TLS=(bool, False),
    EMAIL_USE_SSL=(bool, False),
    #EMAIL_TIMEOUT=(int),
    EMAIL_FROM_ADDRESS=(str, 'noreply@localhost'),
    EMAIL_SSL_KEYFILE=(str, ''),
    EMAIL_SSL_CERTFILE=(str, ''),
    LDAP_LOG_LEVEL=(str, 'INFO'),
    LDAP_SERVER_URI=(str, ''),
    LDAP_BIND_DN=(str, ''),
    LDAP_BIND_PASSWORD=(str, ''),
    LDAP_START_TLS=(bool, True),
    LDAP_USERS_BASE_DN=(str, ''),
    LDAP_GROUPS_BASE_DN=(str, ''),
    LDAP_ACTIVE_GROUP_DN=(str, ''),
    LDAP_STAFF_GROUP_DN=(str, ''),
    LDAP_SUPERUSER_GROUP_DN=(str, ''),
    LDAP_CACHE_GROUPS=(bool, False),
    CELERY_BROKER_USER=(str, ''),
    CELERY_BROKER_PASSWORD=(str, ''),
    CELERY_BROKER_HOST=(str, ''),
    CELERY_BROKER_PORT=(str, ''),
    CELERY_BROKER_VHOST=(str, ''),
)
environ.Env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'paperlesspermission',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admindocs',
    'crispy_forms',
    'django_filters',
    'django_select2',
    'bootstrap_datepicker_plus',
    'django_celery_results',
    'django_celery_beat',
    'djcelery_email',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
]

ROOT_URLCONF = 'paperlesspermission.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'paperlesspermission.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'paperlesspermission',
        'USER': 'paperlesspermission',
        'PASSWORD': 'paperlesspermission',
        'HOST': 'localhost',
        'PORT': '',
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    },
}

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
]

AUTH_LDAP_SERVER_URI = env('LDAP_SERVER_URI')
AUTH_LDAP_START_TLS = env('LDAP_START_TLS')
AUTH_LDAP_BIND_DN = env('LDAP_BIND_DN')
AUTH_LDAP_BIND_PASSWORD = env('LDAP_BIND_PASSWORD')
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    env('LDAP_USERS_BASE_DN'), ldap.SCOPE_SUBTREE, '(uid=%(user)s)'
)
# Set up the basic group parameters.
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    env('LDAP_GROUPS_BASE_DN'),
    ldap.SCOPE_SUBTREE,
    "(objectClass=posixGroup)",
)
AUTH_LDAP_GROUP_TYPE = NestedMemberDNGroupType('member', name_attr='uid')
AUTH_LDAP_USER_ATTR_MAP = {"first_name": "givenName", "last_name": "sn", "email": "mail"}
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_superuser": env('LDAP_SUPERUSER_GROUP_DN'),
    "is_staff": env('LDAP_STAFF_GROUP_DN'),
    "is_active": env('LDAP_ACTIVE_GROUP_DN'),
}
AUTH_LDAP_CACHE_GROUPS = env('LDAP_CACHE_GROUPS')



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Be sure to run (as root):
# mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql
TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# Logging settings
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '[%(name)s] %(levelname)s %(message)s'
        },
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        }
    },
    'loggers': {
        '': {
            'level': 'INFO',
            'handlers': ['console']
        },
        'django_auth_ldap': {
            "level": env('LDAP_LOG_LEVEL'),
            "handlers": ["console"]
        },
    }
})

CRISPY_TEMPLATE_PACK = 'bootstrap4'

BOOTSTRAP4 = {
    'include_jquery': True,
}

LINK_ID_SALT = 'uuidsalt'

LOGIN_URL = '/login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

CELERY_RESULT_BACKEND = 'django-db'

CELERY_BROKER_USER = env('CELERY_BROKER_USER')
CELERY_BROKER_PASSWORD = env('CELERY_BROKER_PASSWORD')
CELERY_BROKER_HOST = env('CELERY_BROKER_HOST')
CELERY_BROKER_PORT = env('CELERY_BROKER_PORT')
CELERY_BROKER_VHOST = env('CELERY_BROKER_VHOST')

DJO_SFTP_HOST = env('DJO_SFTP_HOST')
DJO_SFTP_USER = env('DJO_SFTP_USER')
DJO_SFTP_PASS = env('DJO_SFTP_PASS')
DJO_SFTP_FINGERPRINT = env('DJO_SFTP_FINGERPRINT')


EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_USE_SSL = env('EMAIL_USE_SSL')
#EMAIL_TIMEOUT = env('EMAIL_TIMEOUT')
EMAIL_SSL_KEYFILE = env('EMAIL_SSL_KEYFILE')
EMAIL_SSL_CERTFILE = env('EMAIL_SSL_CERTFILE')
EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
EMAIL_FROM_ADDRESS = env('EMAIL_FROM_ADDRESS')
